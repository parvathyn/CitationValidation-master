using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DataAccess.Model
{
    public class RequestResponseLog
    {
        public static async void ReqResLog(RequestResponseEntity data, string filepath)
        {
            try
            {
                if (!Directory.Exists(filepath))
                {
                    Directory.CreateDirectory(filepath);
                }
                //filepath = Path.Combine(filepath, DateTime.Today.ToString("MM-dd-yy") + ".txt");   //Date in running server Time
                //filepath = Path.Combine(filepath, DateTime.UtcNow.ToString("MM-dd-yy") + ".txt");   //Date in running UTC Time
                filepath = Path.Combine(filepath, data.Response.CityCurrentTime.ToString("MM-dd-yy") + ".txt");   //Date in Customer Time
                if (!File.Exists(filepath))
                {
                    File.Create(filepath).Dispose();
                }
                using (StreamWriter sw = File.AppendText(filepath))
                {
                    StringBuilder sb = new StringBuilder();
                    sb.Append(Environment.NewLine);
                    sb.Append("Request : ").Append(Environment.NewLine);
                    sb.AppendFormat("EnfCustomerId : {0}", data.Request.CustomerId).Append("\t");
                    if(data.Response.CustomerId != "7001")
                         sb.AppendFormat("MeterId : {0}", data.Request.MeterId).Append("\t");
                    else
                        sb.AppendFormat("Meter Name : {0}", data.Request.MeterId).Append("\t");
                    sb.AppendFormat("SpaceId : {0}", data.Request.SpaceId).Append("\t");
                    sb.AppendFormat("UTC Time : {0} ", data.Request.CurrentUTCTime.ToString("O")).Append(Environment.NewLine);
                    sb.AppendFormat("IP Address :{0} ", data.Request.IPAddress).Append(Environment.NewLine);
                    sb.AppendFormat("Request Data : {0} ", data.Request.RequestBody).Append("\t");

                    sb.Append(Environment.NewLine).Append(Environment.NewLine).Append("Response : ").Append(Environment.NewLine);
                    sb.AppendFormat("EnfCustomerId : {0}", data.Response.CustomerId).Append("\t");
                    if (data.Response.CustomerId != "7001")
                        sb.AppendFormat("MeterId : {0}", data.Response.MeterId).Append("\t");
                    else
                        sb.AppendFormat("Meter Name : {0}", data.Response.MeterId).Append("\t");
                    sb.AppendFormat("SpaceId : {0}", data.Response.SpaceId).Append("\t");
                    sb.AppendFormat("StallId : {0}", data.Response.StallId).Append("\t");
                    sb.AppendFormat("Current UTC Time : {0} ", data.Response.CurrentUTCTime.ToString("O")).Append("\t");
                    sb.AppendFormat("CityCurrentTime : {0} ", data.Response.CityCurrentTime.ToString("O")).Append(Environment.NewLine);
                    sb.AppendFormat("Response Data : {0} ", data.Response.ResponseBody).Append(Environment.NewLine);
                    sb.Append("Duration(in Seconds) : ").Append(data.Request.CurrentUTCTime.Subtract(data.Response.CurrentUTCTime).Seconds.ToString());
                    sb.Append(Environment.NewLine);
                    sb.Append("----------------------------------------------------------------------------------------------------------");
                    await sw.WriteAsync(sb.ToString());
                }
            }
            catch (Exception ex)
            {
                var appPath = System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath;
                string errorPath = Path.Combine(appPath, "GetData");
                ExceptionLogging.SendErrorToText(ex, "GetCitationData", errorPath);
            }
        }

        public static async void ReqResLog(RequestResponseEntity data, string filepath, Exception exCaught)
        {
            try
            {
                if (!Directory.Exists(filepath))
                {
                    Directory.CreateDirectory(filepath);
                }
                //filepath = Path.Combine(filepath, DateTime.Today.ToString("MM-dd-yy") + ".txt");   //Date in running server Time
                //filepath = Path.Combine(filepath, DateTime.UtcNow.ToString("MM-dd-yy") + ".txt");   //Date in running UTC Time
                filepath = Path.Combine(filepath, data.Response.CityCurrentTime.ToString("MM-dd-yy") + ".txt");   //Date in Customer Time
                if (!File.Exists(filepath))
                {
                    File.Create(filepath).Dispose();
                }
                using (StreamWriter sw = File.AppendText(filepath))
                {
                    StringBuilder sb = new StringBuilder();
                    sb.Append(Environment.NewLine);
                    sb.Append("Request : ").Append(Environment.NewLine);
                    sb.AppendFormat("EnfCustomerId : {0}", data.Request.CustomerId).Append("\t");
                    if (data.Response.CustomerId != "7001")
                        sb.AppendFormat("MeterId : {0}", data.Request.MeterId).Append("\t");
                    else
                        sb.AppendFormat("Meter Name : {0}", data.Request.MeterId).Append("\t");
                    sb.AppendFormat("SpaceId : {0}", data.Request.SpaceId).Append("\t");
                    sb.AppendFormat("UTC Time : {0} ", data.Request.CurrentUTCTime.ToString("O")).Append(Environment.NewLine);
                    sb.AppendFormat("IP Address :{0} ", data.Request.IPAddress).Append(Environment.NewLine);
                    sb.AppendFormat("Request Data : {0} ", data.Request.RequestBody).Append("\t");

                    sb.Append(Environment.NewLine).Append(Environment.NewLine).Append("Response : ").Append(Environment.NewLine);
                    sb.AppendFormat("EnfCustomerId : {0}", data.Response.CustomerId).Append("\t");
                    if (data.Response.CustomerId != "7001")
                        sb.AppendFormat("MeterId : {0}", data.Response.MeterId).Append("\t");
                    else
                        sb.AppendFormat("Meter Name : {0}", data.Response.MeterId).Append("\t");
                    sb.AppendFormat("SpaceId : {0}", data.Response.SpaceId).Append("\t");
                    sb.AppendFormat("StallId : {0}", data.Response.StallId).Append("\t");
                    sb.AppendFormat("Current UTC Time : {0} ", data.Response.CurrentUTCTime.ToString("O")).Append("\t");
                    sb.AppendFormat("CityCurrentTime : {0} ", data.Response.CityCurrentTime.ToString("O")).Append(Environment.NewLine);
                    sb.AppendFormat("Response Data : {0} ", data.Response.ResponseBody).Append(Environment.NewLine);
                    sb.Append("Duration(in Seconds) : ").Append(data.Request.CurrentUTCTime.Subtract(data.Response.CurrentUTCTime).Seconds.ToString());
                    sb.Append(Environment.NewLine);
                    if (exCaught != null)
                    {
                        sb.Append("Exception :");
                        sb.Append(exCaught.InnerException.StackTrace);
                        if (exCaught.InnerException.InnerException != null)
                        {
                            sb.Append(exCaught.InnerException.InnerException.ToString());
                        }
                    }
                    sb.Append("----------------------------------------------------------------------------------------------------------");
                    await sw.WriteAsync(sb.ToString());
                }
            }
            catch (Exception ex)
            {
                var appPath = System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath;
                string errorPath = Path.Combine(appPath, "GetData");
                ExceptionLogging.SendErrorToText(ex, "GetCitationData", errorPath);
            }
        }
    }
}
